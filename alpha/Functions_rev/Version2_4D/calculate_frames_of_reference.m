%% calculate_frames_of_reference: Computes kinematics in three different frames of reference.
% 
% Credits:
%   (Generated by Gemini)
% 
% Description:
%   This function takes linear kinematics data and computes three different
%   frames of reference (FR) for the position data.
%   - FR1: Absolute coordinates (original data).
%   - FR2: Coordinates relative to the last point of the right ankle's trajectory for each cycle.
%   - FR3: Coordinates relative to the last point of the left ankle's trajectory for each cycle.
%   Velocities and accelerations are copied without alteration.
% 
% Input:
%   linear_kinematics - struct: The output from calculate_linear_kinematics_v3.
% 
% Output:
%   multi_frame_kinematics - struct: A parent struct containing the kinematics 
%                              for each of the three frames of reference (FR1, FR2, FR3).

function multi_frame_kinematics = calculate_frames_of_reference(linear_kinematics)
    fprintf('\n=== CALCULATING MULTIPLE FRAMES OF REFERENCE ===\n');

    % Initialize the output structure
    multi_frame_kinematics = struct();

    % --- FR1: Absolute Frame (Original Data) ---
    fprintf('  Processing FR1 (Absolute)...\n');
    multi_frame_kinematics.FR1 = linear_kinematics;

    % --- FR2: Right-Ankle-Anchored Frame ---
    fprintf('  Processing FR2 (Right-Ankle-Anchored)...\n');
    kinematics_FR2 = linear_kinematics; % Create a deep copy to modify
    
    if isfield(kinematics_FR2, 'right_leg_kinematics') && ~isempty(kinematics_FR2.right_leg_kinematics)
        for i = 1:length(kinematics_FR2.right_leg_kinematics)
            cycle = kinematics_FR2.right_leg_kinematics(i);
            
            % Get the last point of the right ankle trajectory
            last_point_right_ankle = cycle.right_ankle_pos(:, end);
            
            % Subtract the anchor point from all position data in the cycle
            cycle.right_ankle_pos = cycle.right_ankle_pos - last_point_right_ankle;
            cycle.left_ankle_pos = cycle.left_ankle_pos - last_point_right_ankle;
            
            % Store the modified cycle back
            kinematics_FR2.right_leg_kinematics(i) = cycle;
        end
    end
    if isfield(kinematics_FR2, 'left_leg_kinematics') && ~isempty(kinematics_FR2.left_leg_kinematics)% == NOT USED
        for i = 1:length(kinematics_FR2.left_leg_kinematics)
            cycle = kinematics_FR2.left_leg_kinematics(i);
            last_point_right_ankle = cycle.right_ankle_pos(:, end);
            cycle.right_ankle_pos = cycle.right_ankle_pos - last_point_right_ankle;
            cycle.left_ankle_pos = cycle.left_ankle_pos - last_point_right_ankle;
            kinematics_FR2.left_leg_kinematics(i) = cycle;
        end
    end
    multi_frame_kinematics.FR2 = kinematics_FR2;

    % --- FR3: Left-Ankle-Anchored Frame ---
    fprintf('  Processing FR3 (Left-Ankle-Anchored)...\n');
    kinematics_FR3 = linear_kinematics; % Create another deep copy

    if isfield(kinematics_FR3, 'right_leg_kinematics') && ~isempty(kinematics_FR3.right_leg_kinematics)
        for i = 1:length(kinematics_FR3.right_leg_kinematics)
            cycle = kinematics_FR3.right_leg_kinematics(i);
            
            % Get the last point of the left ankle trajectory
            last_point_left_ankle = cycle.left_ankle_pos(:, end);
            
            % Subtract the anchor point from all position data in the cycle
            cycle.right_ankle_pos = cycle.right_ankle_pos - last_point_left_ankle;
            cycle.left_ankle_pos = cycle.left_ankle_pos - last_point_left_ankle;
            
            % Store the modified cycle back
            kinematics_FR3.right_leg_kinematics(i) = cycle;
        end
    end
    if isfield(kinematics_FR3, 'left_leg_kinematics') && ~isempty(kinematics_FR3.left_leg_kinematics) % == NOT USED
        for i = 1:length(kinematics_FR3.left_leg_kinematics)
            cycle = kinematics_FR3.left_leg_kinematics(i);
            last_point_left_ankle = cycle.left_ankle_pos(:, end);
            cycle.right_ankle_pos = cycle.right_ankle_pos - last_point_left_ankle;
            cycle.left_ankle_pos = cycle.left_ankle_pos - last_point_left_ankle;
            kinematics_FR3.left_leg_kinematics(i) = cycle;
        end
    end
    multi_frame_kinematics.FR3 = kinematics_FR3;

    fprintf('Frame of reference calculation complete!\n');
end
